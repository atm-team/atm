var path = require('path');
var fs = require('fs-extra');
var exec = require('child_process').exec;
var prompt = require('prompt');
var extend = require('extend');
var Common = require('atm-common');
var getDepsFunc = require('atm-get-deps');
exports.name = 'map';
exports.desc = '产出地图文件';
exports.register = function (cmd) {
    function split(val) {
        return val.split(',');
    }
    cmd
        .option('-d, --destination <destination>', 'destination', String)
        .option('-p, --parts [parts]', 'parts', split, false)
        .option('-f, --force [force]', 'force deploy', split, false)
        .action(function () {
            var info = Com.getCwdInfo(),
                type = info.type;
            if (!type) {
                Com.exit(info.errorInfo);
            }
            var T = {},
                destination = cmd.destination || 'remote',
                settings = Com.getSettings(info.projectPath),
                com = Com(info.projectPath);

            new Promise(function (resolve, reject) {
                // 校验任务名是否存在
                if (settings.destinations[destination]) {
                    Com.info('will output [' + destination + '] destination');
                    T.getDeps = getDepsFunc(info.projectPath, destination);
                    resolve();
                } else {
                    Com.exit('[' + destination + '] destination does not exist, please check [' + path.join(info.projectPath, 'atm-settings.js') + '] file and added in config.destinations');
                }
            })
                // 获取要发布的模块
                .then(function () {
                    T.versionsArr = info.getVersions(cmd);
                })

                // 让用户确认是否继续
                .then(function () {
                    var promptDesc = info.getOutputPrompt(cmd, T.versionsArr);
                    if (promptDesc) {
                        return new Promise(function (resolve, reject) {
                            prompt.start();
                            prompt.get([
                                {
                                    'name': 'ensure',
                                    'description': promptDesc,
                                    'default': 'yes',
                                    'required': true
                                }
                            ], function (err, result) {
                                if (err) {
                                    throw err;
                                }
                                if (result.ensure === 'yes') {
                                    resolve();
                                } else {
                                    Com.error('you canceled!');
                                    process.exit();
                                }
                            });
                        })
                    }
                })

                // 构建模块
                .then(function () {
                    var versionsArr = T.versionsArr;
                    if (!versionsArr.length) {
                        Com.exit('has no module to build!');
                    } else {
                        Com.info('start building!');
                        var buildVersion = com.buildVersion;
                        versionsArr.forEach(function (routeArr) {
                            buildVersion(routeArr.join('/'), destination);
                        });
                        Com.ok('all versions build ok!');
                    }
                })

                // outputs
                .then(function () {
                    Com.info('start outputing!');
                    T.versionsArr.forEach(function (routeArr) {
                        buildJsonMap(routeArr[0], routeArr[1], routeArr[2]);
                    });

                    function buildJsonMap(familyName, moduleName, version) {
                        var manifestPath = path.join(settings.staticPath, destination, familyName, moduleName, version, 'manifest.json'),
                            manifestJson = fs.readJsonSync(manifestPath),
                            loaderId = settings.loaderId,
                            exportsArr = Com.getExportsArr(manifestJson);
                        if (exportsArr.length) {
                            // 获取json
                            var jsons = {
                                settings: {
                                    port: settings.port,
                                    debugParam: settings.debugParam,
                                    domain: com.getDomain(destination)
                                },
                                maps: {}
                            };
                            exportsArr.forEach(function (id) {
                                jsons.maps[id] = T.getDeps(id, loaderId);
                            });

                            // 生成json文件
                            var outputsPath = path.join(settings.mapsPath, destination, familyName, moduleName);
                            var outputsFile = path.join(outputsPath, version+'.json' );
                            fs.outputJsonSync(outputsFile, jsons);
                            Com.info('output ['+ [familyName, moduleName, version].join('/')+'] ok');
                        } else {
                            if (familyName !== settings.coreName && familyName !== settings.libName) {
                                Com.warn('['+[familyName, moduleName, version].join('/')+'] has no exports')
                            }
                        }
                    }
                })

                // tip completed
                .then(function () {
                    Com.ok('output completed!!');
                });

        });
}
