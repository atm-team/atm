var gb = require('atm-global');
var defaults = require('./src/defaults.js');
var lib = require('atm-lib');
var path = require('path');
var extend = require('extend');
var os = require('os');
var homedir = os.homedir();
function Site(root) {
    this.root = root;
    this.settings = this.getSettings();
}
Site.prototype = {
    constructor: Site,
    getSettings: function () {
        var userSettings = lib.requireLatest(path.join(this.root, 'atmjs/settings'));

        var settings = extend(true, {}, defaults.settings, userSettings);
        for (var target in settings.targets) {
            if (typeof settings.targets[target].domain === 'undefined' ) {
                settings.targets[target].domain = this._getDomain(target, settings.name);
            }
        }

        return settings;
    },
    _getDomain: function (target, siteName) {
        return '/assets/' + siteName + '/' + target;
    },
    getDomain: function (target) {
        var targetsObj = this.settings.targets || {};
        var targetObj = targetsObj[target] || {}
        return targetObj.domain || this._getDomain(target, this.settings.name);
    },
    getDefaultConfigs: function () {
        return extend(true, {}, defaults.configs);
    },
    getUserConfigs: function () {
        var siteConfigsPath = path.join(this.root, 'atmjs/site.json');
        return lib.getJson(siteConfigsPath);
    },
    getConfigs: function () {
        return extend(true, {}, defaults.configs, this.getUserConfigs())
    },
    getLibName: function () {
        return this.settings.libName || 'lib';
    },
    getName: function () {
        return this.settings.name || '';
    },

    // 获取静态文件路径
    getAssetsRoot: function (target) {
        var settings = this.settings;
        target = target || 'dev';
        if (target !== 'dev') {
            var assetsRoot = settings.targets[target].assets || ('{{site}}/../assets/' + settings.name + '/' + target);
            assetsRoot = lib.replacePlaceholder(assetsRoot, {
                homedir: homedir,
                site: this.root,
                target: target
            });
            return assetsRoot;
        } else {
            return this.root;
        }
    },
    getManifestsRoot: function (target) {
        var settings = this.settings;
        target = target || 'dev';
        if (target !== 'dev') {
            var manifestsRoot = settings.targets[target].manifests || ('{{site}}/../manifests/' + settings.name + '/' + target);
            manifestsRoot = lib.replacePlaceholder(manifestsRoot, {
                homedir: homedir,
                site: this.root,
                target: target
            });
            return manifestsRoot;
        } else {
            return this.root;
        }
    },
    getMapsRoot: function (target) {
        var settings = this.settings;
        target = target || 'dev';
        if (target !== 'dev') {
            var mapsRoot = settings.targets[target].maps || ('{{site}}/../maps/' + settings.name + '/' + target);
            mapsRoot = lib.replacePlaceholder(mapsRoot, {
                homedir: homedir,
                site: this.root,
                target: target
            });
            return mapsRoot;
        } else {
            return this.root;
        }
    },
}
module.exports = Site;
