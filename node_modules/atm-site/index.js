var gb = require('atm-global');
var defaults = require('./src/defaults.js');
var lib = require('atm-lib');
var path = require('path');
var extend = require('extend');
var os = require('os');
var homedir = os.homedir();
function Site(root) {
    this.root = root;
    this.settings = this.getSettings();
}
Site.prototype = {
    constructor: Site,
    getSettings: function () {
        var userSettings = lib.requireLatest(path.join(this.root, 'atmjs/settings'));

        var settings = extend(true, {}, defaults.settings, userSettings);
        for (var target in settings.targets) {
			var targetConfigs = settings.targets[target];
            if (typeof targetConfigs.domain === 'undefined' ) {
                targetConfigs.domain = this._getDomain(target, settings.name);
            }
			targetConfigs.assetsRoot = targetConfigs.assetsRoot || '{{sitedir}}/atmjs/assets/{{target}}';
			targetConfigs.manifestsRoot = targetConfigs.manifestsRoot || targetConfigs.assetsRoot;
			targetConfigs.mapsRoot = targetConfigs.mapsRoot || targetConfigs.assetsRoot;
			targetConfigs.assetsOffset = targetConfigs.assetsOffset || '';
			targetConfigs.manifestsOffset = targetConfigs.manifestsOffset || '';
			targetConfigs.mapsOffset = targetConfigs.mapsOffset || '';
        }
        return settings;
    },
    _getDomain: function (target, siteName) {
        return '/assets/' + target;
    },
    getDomain: function (target) {
        var targetsObj = this.settings.targets || {};
        var targetObj = targetsObj[target] || {}
        return targetObj.domain || this._getDomain(target, this.settings.name);
    },
    getDefaultConfigs: function () {
        return extend(true, {}, defaults.configs);
    },
    getUserConfigs: function () {
        var siteConfigsPath = path.join(this.root, 'atmjs/site.json');
        return lib.getJson(siteConfigsPath);
    },
    getConfigs: function () {
        return extend(true, {}, defaults.configs, this.getUserConfigs())
    },
    getLibName: function () {
        return this.settings.libName || 'lib';
    },
    getName: function () {
        return this.settings.name || '';
    },
    // 获取静态文件路径
    getAssetsRoot: function (target) {
        var settings = this.settings;
        target = target || 'dev';
		var targetConfigs = settings.targets[target] || {};
		var assetsRoot = targetConfigs.assetsRoot || ('{{sitedir}}/atmjs/assets/' + target);
		assetsRoot = lib.replacePlaceholder(assetsRoot, {
			target: target,
			homedir: homedir,
			sitedir: this.root,
			site: this.getName()
		});
		return assetsRoot;
    },
    getManifestsRoot: function (target) {
        var settings = this.settings;
        target = target || 'dev';

		var targetConfigs = settings.targets[target] || {};
		var manifestsRoot = targetConfigs.manifestsRoot || ('{{sitedir}}/atmjs/assets/' + target);
		manifestsRoot = lib.replacePlaceholder(manifestsRoot, {
			target: target,
			homedir: homedir,
			sitedir: this.root,
			site: this.getName()
		});
		return manifestsRoot;
    },
    getMapsRoot: function (target) {
        var settings = this.settings;
        target = target || 'dev';
        var mapsRoot = settings.targets[target].mapsRoot || ('{{sitedir}}/atmjs/maps/' + target);
		mapsRoot = lib.replacePlaceholder(mapsRoot, {
			target: target,
			homedir: homedir,
			sitedir: this.root,
			site: this.getName()
		});
		return mapsRoot;
    },
}
module.exports = Site;
