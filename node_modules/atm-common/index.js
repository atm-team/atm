var path = require('path');
var extend = require('extend');
var lib = require('atm-lib');
var Site = require('atm-site');
var gb = require('atm-global');
var semver = require('semver');
var fs = require('fs-extra');
var os = require('os');
var homedir = os.homedir();

function Common(arg) {
    var newArg = {};
    if (arg.versionPath) {
        var pathArr = arg.versionPath.split(path.sep);
        this.versionName = pathArr.pop();
        this.moduleName = pathArr.pop();
        this.projectName = pathArr.pop();
        this.sitePath = pathArr.join(path.sep);
        this.versionPath = arg.versionPath;
        this.site = new Site(this.sitePath);
    } else {
        if (arg.sitePath) {
            this.sitePath = arg.sitePath;
            if (!arg.siteName) {
                this.site = new Site(this.sitePath);
                this.siteName = this.site.getName(this.sitePath);
            }
        } else if(arg.siteName) {
            this.sitePath = gb.getSitePath(arg.siteName);
            this.site = new Site(this.sitePath);
            this.siteName = arg.siteName;
        }
        this.projectName = arg.projectName;
        this.moduleName = arg.moduleName;
        this.versionName = arg.versionName;
    }
    this.projectPath = path.join(this.sitePath, this.projectName);
    this.modulePath = path.join(this.projectPath, this.moduleName);
    this.versionPath = this.versionPath || path.join(this.modulePath, this.versionName);
    this.router = [this.projectName, this.moduleName, this.versionName].join('/');
    this.underLib = this.projectName === this.site.getLibName() ? true : false;
}
Common.prototype = {
    constructor: Common,
    getSiteConfigs: function () {
        if (this.underLib) {
            return this.site.getDefaultConfigs();
        } else {
            return this.site.getConfigs();
        }
    },
    getConfigs: function () {
		// 如果已经获取过，则直接返回
        if (this.__configs) {
            return this.__configs;
        }
		var site = this.site;
		var defaultConfigs = site.getDefaultConfigs();
		var siteConfigs = site.getConfigs();
        var versionConfigs = this.getVersionConfigs();

        if (!this.underLib) {
            var projectConfigs = this.getProjectConfigs();
			delete siteConfigs.exports;
            delete projectConfigs.exports;

			delete siteConfigs.packs;
            delete projectConfigs.packs;

            versionConfigs = extend(true, {}, siteConfigs, projectConfigs, versionConfigs);
			return this.__configs = versionConfigs;
        } else {
			return this.__configs = extend(true, {}, defaultConfigs, versionConfigs);
		}

    },

	// 获取构建规则配置数组
    getBuilds: function () {
        var arr = [];
        var site = this.site;
		var defaultConfigs = site.getDefaultConfigs();
        var siteConfigs = site.getConfigs();
        var projectConfigs = this.getProjectConfigs();
        var versionConfigs = this.getVersionConfigs();
		var configArr = [];
		configArr = !this.underLib ?
			[siteConfigs, projectConfigs, versionConfigs] :
			[defaultConfigs, versionConfigs];
        [siteConfigs, projectConfigs, versionConfigs].forEach(function (v) {
            var val = v['builds'];
            if (val && Array.isArray(val)) {
                arr = arr.concat(val);
            }
        });
        return arr;
    },

    getAssetsRouter: function (target) {
        if (target === 'dev') {
            return this.router;
        } else {
            var assetsRouter;
            if (this.site.settings.together) {
                assetsRouter = [this.projectName, this.moduleName].join('/');
            } else {
                assetsRouter = this.router;
            }
            return assetsRouter;
        }
    },

    // 获取静态文件路径
    getAssetsPath: function (target) {
        var that = this;
        var site = that.site;
        target = target || 'dev';
        var assetsPath = path.join(site.getAssetsRoot(target), that.getAssetsRouter(target));
        if (target === 'dev') {
            assetsPath = path.join(assetsPath, 'atmdist');
        }
        return assetsPath;
    },

    // 获取静态文件uri
    getAssetsUri: function (target) {
        return '/' + this.getAssetsRouter(target);
    },

    // 获取完整的uri
    getCompleteUri: function (target) {
        return [this.site.getDomain(target), this.getAssetsRouter(target)].join('/');
    },

    // 获取清单文件
    getManifestFile: function (target) {
        var that = this;
        var site = that.site;
		var siteSettings = site.settings;
		var targetConfigs = siteSettings.targets[target];
		var manifestFile = targetConfigs.manifestFile;
		manifestFile = lib.replacePlaceholder(manifestFile, {
			homedir: homedir,
			sitedir: that.sitePath,
			site: site.getName(),
			project: that.projectName,
			module: that.moduleName,
			version: that.versionName,
			router: that.getAssetsRouter(target),
			target: target
		});
		return manifestFile;


        // target = target || 'dev';
        // var manifestPath = path.join(site.getManifestsRoot(target), that.getAssetsRouter(target));
        // if (target === 'dev') {
        //     manifestPath = path.join(manifestPath, 'atmdist/manifest');
        // }
        // return path.join(manifestPath, this.versionName + '.json');
    },

    getMapFile: function (target) {

		var that = this;
        var site = that.site;
		var siteSettings = site.settings;
		var targetConfigs = siteSettings.targets[target];
		var mapFile = targetConfigs.mapFile;
		mapFile = lib.replacePlaceholder(mapFile, {
			homedir: homedir,
			sitedir: that.sitePath,
			site: site.getName(),
			project: that.projectName,
			module: that.moduleName,
			version: that.versionName,
			router: that.getAssetsRouter(target),
			target: target
		});
		return mapFile;

        var that = this;
        var site = that.site;
        target = target || 'dev';
        var mapPath = path.join(site.getMapsRoot(target), that.getAssetsRouter(target));
        if (target === 'dev') {
            mapPath = path.join(mapPath, 'atmdist/map');
        }
        return path.join(mapPath, this.versionName + '.json');
    },

    transformNamespace: function (ns) {
        ns = lib.replacePlaceholder(ns, {
            project: this.projectName,
            module: this.moduleName,
            version: this.versionName
        });
        var router;
        var arr = ns.split('/');
        var length = arr.length;
        var libName = this.site.getLibName();

        if (length === 3) {                 // 两条反斜线
            router = ns
        } else if (length === 2) {          // 一条反斜线
            var hasVersionInfo = semver.valid(arr[1]);
            if (!hasVersionInfo) {
                router = ns + '/' + this.getVersion(ns);
            } else {
                router = libName + '/' + ns;
            }
        } else if (length === 1) {          // 没有反斜线
            ns = [libName, ns].join('/');
            router = [ns, this.getVersion(ns)].join('/');
        }
        return router;
    },

    // 转换id到标准id
    transformId: function (id) {
        var configs = this.getConfigs();
        if (configs.alias[id]) {
            id = configs.alias[id];
        }

        var trueId = lib.replacePlaceholder(id, {
            project: this.projectName,
            module: this.moduleName,
            version: this.versionName
        });

        if (this._idsMap[trueId]) {
            return this._idsMap[trueId];
        } else {
            // 如果替换过占位符后的id里面没有冒号,则直接返回
            if (trueId.indexOf(':') === -1) {
                return this._idsMap[trueId] = trueId;
            } else {
                var arr = trueId.split(':');
                var ns = this.transformNamespace(arr[0]);
                return this._idsMap[trueId] = [ns, arr[1]].join(':');
            }
        }
    },
    _idsMap: {},
    _versionsMap: {},
    getMaxVersion: function (moduleRoute, range) {
        var sitePath = this.sitePath;
        var arr = fs.readdirSync(path.join(sitePath, moduleRoute));
        var vArr = [];
        var version;
        arr.forEach(function (v) {
            if (semver.valid(v)) {
                var versionPath = path.join(sitePath, moduleRoute, v);
                if (fs.existsSync(versionPath)) {
                    var jsonPath = path.join(versionPath, 'atmconfig.json');
                    if (fs.existsSync(jsonPath)) {
                        var json = fs.readJsonSync(jsonPath);
                        if (!json.close) {
                            vArr.push(v);
                        }
                    } else {
                        vArr.push(v);
                    }
                }
            }
        });
        if (range) {
            version = semver.maxSatisfying(vArr, range);
            if (!version) {
                throw new Error('[ ' + moduleRoute + ' ] 找不到[ ' + range + ' ] 对应的版本!');
            }
        } else {
            version = semver.maxSatisfying(vArr, '')
        }
        return version;
    },
    getVersion: function (moduleRoute) {
        var that = this;
        if (!moduleRoute) {
            return null;
        }
        var arr = moduleRoute.split('/');
        var _projectName = arr[0];
        var _moduleRoute = this.underLib ? arr[1] : moduleRoute;

        if (this._versionsMap[_moduleRoute]) {
            return this._versionsMap[_moduleRoute];
        } else {
            var configs = this.getConfigs();
            return this._versionsMap[_moduleRoute] = this.getMaxVersion(moduleRoute, configs.deps[_moduleRoute]);
        }
    },

    getProjectConfigs: function () {
        var projectConfigs = lib.getJson(path.join(this.projectPath, 'atmconfig.json'));
        projectConfigs = this._transformAlias(this._transformDeps(projectConfigs));
        return projectConfigs;
    },

    getVersionConfigs: function () {
        var versionConfigs = lib.getJson(path.join(this.versionPath, 'atmconfig.json'));
        versionConfigs = this._transformAlias(this._transformDeps(versionConfigs));
        return versionConfigs;
    },

    // 解析 atmconfig.json 里面的deps字段里面的{{project}} 和 {{module}}
    // todo 该占位符将在以后版本中废除,不建议再继续使用占位符
    _transformDeps: function (configs) {
        if (configs.deps) {
            var that = this;
            for (var id in configs.deps) {
                if (id.indexOf('{{') > -1) {
                    var oldDeps = configs.deps[id];
                    delete configs.deps[id];
                    id = id.replace(/\{\{project\}\}/g, that.projectName);
                    id = id.replace(/\{\{module\}\}/g, that.moduleName);
                    configs.deps[id] = oldDeps
                }
            }
        }
        return configs;
    },
    _transformAlias: function (configs) {
        if (configs.alias) {
            var that = this;
            for(var id in configs.alias) {
                var alias = configs.alias[id];
                if (alias.indexOf('{{') > -1) {
                    alias = alias.replace(/\{\{project\}\}/g, that.projectName);
                    alias = alias.replace(/\{\{module\}\}/g, that.moduleName);
                    configs.alias[id] = alias;
                }
            }
        }
        return configs;
    }
}
module.exports = Common;
