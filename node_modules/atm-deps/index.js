var fs = require('fs');
var path = require('path');
var getCommon = require('atmjs-common');
module.exports = function (arg) {
    var sitePath = arg.sitePath;
    var projectName = arg.projectName;
    var moduleName = arg.moduleName;
    var versionName = arg.versionName;
    var target = arg.target || 'dev';

    var common = getCommon({
        sitePath: sitePath,
        projectName: projectName,
        moduleName: moduleName,
        versionName: versionName
    });
    var domain = common.getDomain(target);
    var libName = common.info.libName;
    var format = common.configs.formatTag;
    //var unblock = common.configs.async || false;
    var firstType = {};
    return function (interfaceIds) {

        var parentIds = {}
        var exportsDatas = common.getExportsDatas();
        var manifests = {};
        var jsonCache = {};      //全部fis map数据的缓存
        var asyncs = {};
        var errorIds = [];

        var cssExists = {};
        var jsExists = {};
        var jsUris = {};            // 页面需要的js所在的文件或合并文件的uri数据,uri为键名,键值为1
        var cssDepsArr = [];        // 页面需要的css文件或合并文件的uri数组,用数组主要是为了保证css的加载顺序

        var loaderId = common.transformId(common.configs.loaderId);
        var loaderUri = getUri(loaderId);

        interfaceIds = (function () {
            var arr = [];
            if (typeof interfaceIds === 'string') {
                interfaceIds = [interfaceIds];
            }
            interfaceIds.forEach(function (v) {
                return arr.push(common.transformId(v));
            });
            return arr;
        })();

        var isMod = (function () {
            var status = true;
            interfaceIds.forEach(function (id) {
                var data = exportsDatas[id] || {}
                if (data.unMod) {
                    status = false;
                    return false;
                }
            });
            return status;
        })();
        //判断入口文件是否为css文件
        var onlyCss = (function () {
            var isCss = true;
            interfaceIds.forEach(function (id) {
                if (getType(id) === 'js') {
                    isCss = false;
                    return false;
                }
            });
            return isCss;
        })();
        var asyncData = {
            uris: {},
            css: {},
            js: {},
            deps: {}
        };
        var jsonData = {
            css: [],
            loader: '',
            //map: '',
            js: [],
            onlyCss: onlyCss,
            async: common.configs.async || false,
            //defer: common.configs.async || false,
            format: !!format    // 是否格式化标签
        };

        isMod && interfaceIds.unshift(loaderId);

        importIds(interfaceIds);

        pushCssData();
        if (!onlyCss) {
            pushJsData();
            importArrAsync(interfaceIds);
            pushMapData();
        }

        if (errorIds.length) {
            throw new Error('[' + JSON.stringify(errorIds.join(',')) + '] 找不到对应的文件');
        }
        return jsonData;

        // 根据id获取路由
        function getRoute(id) {
            return id.split(':')[0];
        }

        // 根据路由获取清单文件路径
        function getManifestPath(route, id) {
            if (manifests[route]) {
                return manifests[route];
            } else {
                //
                var arr = route.split('/');
                try {
                    var _common = getCommon({
                        sitePath: sitePath,
                        projectName: arr[0],
                        moduleName: arr[1],
                        versionName: arr[2]
                    });
                    return manifests[route] = _common.getManifestPath(target);
                } catch(err) {
                    throw new Error('[ ' +parentIds[id] + ' ]文件内无法找到[ '+ id + ' ]对应的文件!')
                }

            }
        }

        // 获取id所在json文件的json数据(如果在缓存中找不到对应数据,则读取文件)
        function getMap(id) {
            var route = getRoute(id);
            var cache = jsonCache[route];
            if (!cache) {
                var filePath = getManifestPath(route, id);
                try {
                    cache = jsonCache[route] = JSON.parse(fs.readFileSync(filePath));
                } catch (e) {
                    throw e;
                }
            }
            return cache;
        }

        // 获取json文件里面对应的res数据里面对应id的数据
        function getRes(id) {
            var fileJson = getMap(id);
            var allRes = fileJson.res;
            if (!allRes.hasOwnProperty(id)) {
                if (errorIds.indexOf(id) == -1) {
                    errorIds.unshift(id);
                }
            }
            try {
                var datas = allRes[id].deps || {};
            } catch(err) {
                throw new Error('找不到[' + id + '],请检查是否书写错误');
            }

            var uri = allRes[id].uri;
            for(var i in datas) {
                var depId = datas[i];
                parentIds[depId] = uri;
            }
            return allRes[id] || {};
        }

        // 获取json文件里面对应的pkg数据里面对应id的数据
        function getPkg(pkgId, id) {
            var fileJson = getMap(id);
            var allPkg = fileJson.pkg;
            return allPkg[pkgId] || {}
        }

        // 获取id需要异步加载的依赖数组
        function getAsync(id) {
            var res = getRes(id);
            if (res.extras && res.extras.async) {
                return res.extras.async;
            }
            return [];
        }

        // 获取文件类型
        function getType(id) {
            var res = getRes(id);
            return res.type;
        }

        // 获取文件uri
        function getUri(id) {
            var res = getRes(id);
            if (res.pkg) {
                return getPkg(res.pkg, id).uri;
            } else {
                return res.uri;
            }
        }

        // 导入入口文件依赖的async数据
        function importArrAsync(ids) {
            for (var i in ids) {
                importAsync(ids[i]);
            }
            // 导入
            function importAsync(id) {
                if (asyncs[id]/* || interfaceIds.indexOf(id)>-1*/ || loaderId === id) {
                    return;
                }
                asyncs[id] = true;
                var json = getRes(id);
                var deps = json.deps || [];
                var arr = getAsync(id);
                arr = arr.concat(deps);
                importArrAsync(arr);

                var pkgId = json.pkg;
                if (pkgId) {
                    json = getPkg(pkgId, id);
                }

                if (deps.length) {
                    asyncData.deps[id] = deps;
                }
                asyncData.uris[id] = json.uri;
            }
        }

        function singleImportJs(id, json) {
            // 设置jsExists[id] = true,说明该文件已引入到页面
            //jsExists[id] = true;
            if (json.deps) {
                var unExistsIds = getUnexistsIds(json.deps);
                unExistsIds.length && singleImports(unExistsIds);
            }
            //如果json数据里面有pkg字段,则引入该文件时其实引入的是该文件所在的打包文件
            if (json.pkg) {
                var json2 = getPkg(json.pkg, id);
                json2.has.forEach(function (v) {
                    jsExists[v] = true;
                })
                jsUris[json2.uri] = 1;

            } else {
                jsExists[id] = true;
                jsUris[json.uri] = 1;
            }
        }

        function singleImportCss(id, json) {
            // 设置cssExists[id] = 1,说明该文件已引入到页面
            //cssExists[id] = 1;
            if (json.deps) {
                var unExistsIds = getUnexistsIds(json.deps);
                unExistsIds.length && singleImports(unExistsIds);
                //singleImports(getUnexistsIds(json.deps));
            }

            //如果json数据里面有pkg字段,则引入该文件时其实引入的是该文件所在的打包文件
            if (json.pkg) {
                json = getPkg(json.pkg, id);
                json.has.forEach(function (v) {
                    cssExists[v] = true;
                });
            } else {
                cssExists[id] = 1;
            }
            cssDepsArr.push(json.uri);
        }
        function singleImports(ids) {
            var jses = [];
            var csses = [];
            for (var i in ids) {
                var id = String(ids[i]).trim();
                if (getType(id) === 'js') {
                    jses.push(id);
                } else {
                    csses.push(id);
                }
                singleImport(id);
            }

        }


        function getUnexistsIds(ids) {
            var arr = [];
            ids = ids || [];
            ids.forEach(function (id) {
                if (!jsExists[id] && !cssExists[id]) {
                    arr.push(id);
                }
            });
            return arr;
        }


        function singleImport(id) {
            if (jsExists[id] || cssExists[id]) {
                return;
            }
            var json = getRes(id),
                type = json.type;
            if (type === 'js') {
                singleImportJs(id, json);
            } else if (type === 'css') {
                singleImportCss(id, json);
            }
        }

        function getCssDeps(deps) {
            var cssDeps = [];
            for (var i in deps) {
                if (getType(deps[i]) === 'css') {
                    cssDeps.push(deps[i]);
                }
            }
            return cssDeps.length ? cssDeps : null
        }
        function getJsDeps(deps) {
            var jsDeps = [];
            for (var i in deps) {
                if (getType(deps[i]) === 'js') {
                    jsDeps.push(deps[i]);
                }
            }
            return jsDeps.length ? jsDeps : null
        }

        function importIds(ids) {
            if (typeof ids === 'string') {
                ids = [ids];
            }
            singleImports(ids);
        }

        // 插入jsUris里面加载现有的js文件
        function pushJsData() {
            for(var uri in jsUris) {
                if (uri !== loaderUri) {
                    //jsonData.js.unshift(uri);
                    jsonData.js.push(uri);
                } else {
                    jsonData.loader = uri;
                }
            }
        }

        // 去除数组里面重复的元素
        function unique(arr) {
            if (!Array.isArray(arr)) {
                return [];
            }
            var obj = {},
                uniqueArr = [];
            arr.forEach(function (id) {
                if (!obj[id]) {
                    uniqueArr.push(id);
                }
                obj[id] = true;
            });
            return uniqueArr;
        }

        // 插入uris里面加载现有的css文件
        function pushCssData() {
            unique(cssDepsArr).forEach(function (uri) {
                jsonData.css.push(uri);
            });
        }

        function pushMapData() {
            var uris = asyncData.uris;
            for (var id in uris) {
                if (jsExists[id] || cssExists[id]) {
                    delete uris[id];
                }
            }
            var config = {
                target: target,
                //unblock: unblock,
                domain: domain,
                //libName: libName,
                version: versionName,
                alias: (function (alias) {
                    var completeAlias = {}
                    if (!alias) { return {}; };
                    for (var id in alias) {
                        completeAlias[id] = common.transformId(alias[id]);
                    }
                    return completeAlias;
                })(common.configs.alias)
            }
            asyncData = transformAsyncData(asyncData);
            if (asyncData){
                config.async = asyncData;
            }

            jsonData.init = isMod ? JSON.stringify(config) : '';
        }


        function transformAsyncData(data) {
            var idUniqueArr = [];
            var uriUniqueArr = [];
            var typeArr = [];
            var idObj = {};
            var uriObj = {}
            var idUnique = 0;
            var uriUnique = 0;
            var uris = data.uris || {};
            var deps = data.deps || {};
            var css = data.css || {};
            var js = data.js || {};

            var newUris = {};
            var newDeps = {};
            var newTypes = {};
            for(var id in uris) {
                var key = getIdAlias(id);
                newUris[key] = getUriAlias(uris[id]);
            }
            for(var id in deps) {
                var arr = deps[id];
                var newArr = [];
                for(var i in arr) {
                    newArr.push(getIdAlias(arr[i]));
                }
                newDeps[getIdAlias(id)] = newArr;
            }
            //for(var id in css) {
            //    var arr = css[id];
            //    var newArr = [];
            //    for(var i in arr) {
            //        newArr.push(getIdAlias(arr[i]));
            //    }
            //    newCss[getIdAlias(id)] = newArr;
            //}
            //
            //for(var id in js) {
            //    var arr = js[id];
            //    var newArr = [];
            //    for(var i in arr) {
            //        newArr.push(getIdAlias(arr[i]));
            //    }
            //    newJs[getIdAlias(id)] = newArr;
            //
            //}



            function getIdUnique () {
                return idUnique++;
            }
            function getUriUnique () {
                return uriUnique++;
            }

            function getIdAlias(id) {
                if (typeof idObj[id] === 'undefined') {
                    idUniqueArr.push(id);
                    var type = getType(id);
                    type = type === 'js' ? 1 : 0;
                    typeArr.push(type);
                    idObj[id] = getIdUnique();
                }
                return idObj[id];
            }

            function getUriAlias(id) {
                if (!uriObj[id]) {
                    uriUniqueArr.push(id);
                    uriObj[id] = getUriUnique();
                }
                return uriObj[id];
            }


            var newData = {};
            if (Object.keys(newDeps).length) {
                newData.deps = newDeps;
            }
            if (idUniqueArr.length) {
                newData.id = idUniqueArr;
                newData.type = typeArr;
            }
            if (uriUniqueArr.length) {
                newData.uri = uriUniqueArr;
            }
            if (Object.keys(newUris).length) {
                newData.uris = newUris;
            }
            if (Object.keys(newData).length) {
                return newData;
            } else {
                return null;
            }


        }
    }
};

//function numberToSting(num) {
//    num = num.toString(26);
//    var len = num.length;
//    var arr = [];
//    for(var i = 0; i < len; i++) {
//        var code = num.charCodeAt(i);
//        if (code < 58) {
//            code = (code - 48) + 97;
//        } else if (code > 97) {
//            code = code + 10;
//        }
//        arr.push(String.fromCharCode(code));
//    }
//    return arr.join('');
//}
